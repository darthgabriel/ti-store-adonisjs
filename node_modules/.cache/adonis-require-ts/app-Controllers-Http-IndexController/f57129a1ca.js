"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class IndexController {
    async index({ auth, request, response, view }) {
        let general = {
            categorias: await Database_1.default.from('productos_categorias').select('categoria').distinct()
        };
        for (let i = 0; i < general.categorias.length; i++) {
            general.categorias[i].subcategoria = await Database_1.default.from('productos_categorias').select('subcategoria').where('categoria', general.categorias[i].categoria);
        }
        return view.render('index/home', { general });
    }
    async login_form({ auth, request, response, view }) {
        await auth.use('web').check();
        if (!auth.use('web').isLoggedIn) {
            return view.render('index/login');
        }
        else {
            response.redirect('/dashboard');
        }
    }
    async login_post({ auth, request, response, view }) {
        const username = request.input('username');
        const password = request.input('password');
        const user = await User_1.default
            .query()
            .where('username', username)
            .where('password', password)
            .first();
        if (user != null) {
            await auth.use('web').login(user);
        }
        response.redirect('/dashboard');
    }
    async dashboard({ auth, request, response, view }) {
        await auth.use('web').authenticate();
        let general = {};
        console.info(auth.user?.$attributes.username);
        return view.render('index/dashboard', { general });
    }
    async logout({ auth, request, response, view }) {
        await auth.use('web').logout();
        response.redirect('/login');
    }
}
exports.default = IndexController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSW5kZXhDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMkZBQWlEO0FBQ2pELGlGQUFrQztBQUVsQyxNQUFxQixlQUFlO0lBRXpCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQXNCO1FBRW5FLElBQUksT0FBTyxHQUFHO1lBQ1YsVUFBVSxFQUFFLE1BQU0sa0JBQVEsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFO1NBQ3pGLENBQUE7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDaEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUcsTUFBTSxrQkFBUSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDN0o7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBc0I7UUFDeEUsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRTtZQUNqQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7U0FDaEM7YUFBTTtZQUNILFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDbEM7SUFFTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBc0I7UUFDeEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMxQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSTthQUNsQixLQUFLLEVBQUU7YUFDUCxLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUMzQixLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUMzQixLQUFLLEVBQUUsQ0FBQTtRQUVaLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUVkLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDcEM7UUFFRCxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUN2RSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7UUFFcEMsSUFBSSxPQUFPLEdBQUcsRUFFYixDQUFBO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM3QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUNwRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDOUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQixDQUFDO0NBQ0o7QUF6REQsa0NBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4Q29udHJvbGxlciB7XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoe2F1dGgsIHJlcXVlc3QsIHJlc3BvbnNlLCB2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCkge1xuXG4gICAgICAgIGxldCBnZW5lcmFsID0ge1xuICAgICAgICAgICAgY2F0ZWdvcmlhczogYXdhaXQgRGF0YWJhc2UuZnJvbSgncHJvZHVjdG9zX2NhdGVnb3JpYXMnKS5zZWxlY3QoJ2NhdGVnb3JpYScpLmRpc3RpbmN0KClcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlbmVyYWwuY2F0ZWdvcmlhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZ2VuZXJhbC5jYXRlZ29yaWFzW2ldLnN1YmNhdGVnb3JpYSA9IGF3YWl0IERhdGFiYXNlLmZyb20oJ3Byb2R1Y3Rvc19jYXRlZ29yaWFzJykuc2VsZWN0KCdzdWJjYXRlZ29yaWEnKS53aGVyZSgnY2F0ZWdvcmlhJyxnZW5lcmFsLmNhdGVnb3JpYXNbaV0uY2F0ZWdvcmlhKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpZXcucmVuZGVyKCdpbmRleC9ob21lJyx7Z2VuZXJhbH0pXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGxvZ2luX2Zvcm0oe2F1dGgsIHJlcXVlc3QsIHJlc3BvbnNlLCB2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBhd2FpdCBhdXRoLnVzZSgnd2ViJykuY2hlY2soKVxuICAgICAgICBpZiAoIWF1dGgudXNlKCd3ZWInKS5pc0xvZ2dlZEluKSB7XG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcignaW5kZXgvbG9naW4nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UucmVkaXJlY3QoJy9kYXNoYm9hcmQnKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9naW5fcG9zdCh7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UsIHZpZXd9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gcmVxdWVzdC5pbnB1dCgndXNlcm5hbWUnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJyk7XG5cbiAgICAgICAgLy8gTG9va3VwIHVzZXIgbWFudWFsbHlcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJcbiAgICAgICAgICAgIC5xdWVyeSgpXG4gICAgICAgICAgICAud2hlcmUoJ3VzZXJuYW1lJywgdXNlcm5hbWUpXG4gICAgICAgICAgICAud2hlcmUoJ3Bhc3N3b3JkJywgcGFzc3dvcmQpXG4gICAgICAgICAgICAuZmlyc3QoKVxuXG4gICAgICAgIGlmICh1c2VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzZXNzaW9uXG4gICAgICAgICAgICBhd2FpdCBhdXRoLnVzZSgnd2ViJykubG9naW4odXNlcilcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3BvbnNlLnJlZGlyZWN0KCcvZGFzaGJvYXJkJylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGFzaGJvYXJkKHthdXRoLCByZXF1ZXN0LCByZXNwb25zZSwgdmlld306IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgYXdhaXQgYXV0aC51c2UoJ3dlYicpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgIC8vIOKchSBSZXF1ZXN0IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgbGV0IGdlbmVyYWwgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmluZm8oYXV0aC51c2VyPy4kYXR0cmlidXRlcy51c2VybmFtZSlcbiAgICAgICAgcmV0dXJuIHZpZXcucmVuZGVyKCdpbmRleC9kYXNoYm9hcmQnLHtnZW5lcmFsfSlcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9nb3V0KHthdXRoLCByZXF1ZXN0LCByZXNwb25zZSwgdmlld306IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgYXdhaXQgYXV0aC51c2UoJ3dlYicpLmxvZ291dCgpXG4gICAgICAgIHJlc3BvbnNlLnJlZGlyZWN0KCcvbG9naW4nKVxuICAgIH1cbn1cbiJdfQ==