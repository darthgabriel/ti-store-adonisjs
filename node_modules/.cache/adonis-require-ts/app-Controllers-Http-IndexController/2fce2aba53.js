"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class IndexController {
    async index({ auth, request, response, view }) {
        let general = {
            categorias: await Database_1.default.from('productos_categorias').select('categoria').distinct()
        };
        for (let i = 0; i < general.categorias.length; i++) {
            general.categorias[i].subcategoria = await Database_1.default.from('productos_categorias').select('subcategoria').where('categoria', general.categorias[i].categoria);
        }
        return view.render('index/home', { general });
    }
    async politicas_venta({ auth, request, response, view }) {
        let general = {
            categorias: await Database_1.default.from('productos_categorias').select('categoria').distinct()
        };
        for (let i = 0; i < general.categorias.length; i++) {
            general.categorias[i].subcategoria = await Database_1.default.from('productos_categorias').select('subcategoria').where('categoria', general.categorias[i].categoria);
        }
        return view.render('index/politicas_venta', { general });
    }
    async garantia_devolucion({ auth, request, response, view }) {
        let general = {
            categorias: await Database_1.default.from('productos_categorias').select('categoria').distinct()
        };
        for (let i = 0; i < general.categorias.length; i++) {
            general.categorias[i].subcategoria = await Database_1.default.from('productos_categorias').select('subcategoria').where('categoria', general.categorias[i].categoria);
        }
        return view.render('index/garantia_devolucion', { general });
    }
    async login_form({ auth, request, response, view }) {
        await auth.use('web').check();
        if (!auth.use('web').isLoggedIn) {
            return view.render('index/login');
        }
        else {
            response.redirect('/dashboard');
        }
    }
    async login_post({ auth, request, response, view }) {
        const username = request.input('username');
        const password = request.input('password');
        const user = await User_1.default
            .query()
            .where('username', username)
            .where('password', password)
            .first();
        if (user != null) {
            await auth.use('web').login(user);
        }
        response.redirect('/dashboard');
    }
    async dashboard({ auth, request, response, view }) {
        await auth.use('web').authenticate();
        let general = {};
        console.info(auth.user?.$attributes.username);
        return view.render('index/dashboard', { general });
    }
    async logout({ auth, request, response, view }) {
        await auth.use('web').logout();
        response.redirect('/login');
    }
}
exports.default = IndexController;
//# sourceMappingURL=data:application/json;base64,