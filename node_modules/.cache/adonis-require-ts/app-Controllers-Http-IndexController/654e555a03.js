"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class IndexController {
    async index({ auth, request, response, view }) {
        return view.render('index');
    }
    async login_form({ auth, request, response, view }) {
        await auth.use('web').check();
        let authenticate = auth.use('web').isLoggedIn;
        if (!authenticate) {
            return view.render('login');
        }
        else {
            response.redirect('/dashboard');
        }
    }
    async login_post({ auth, request, response, view }) {
        const username = request.input('username');
        const password = request.input('password');
        const user = await User_1.default
            .query()
            .where('username', username)
            .where('password', password)
            .firstOrFail();
        await auth.use('web').login(user);
        response.redirect('/dashboard');
    }
    async dashboard({ auth, request, response, view }) {
        await auth.use('web').authenticate();
        response.send(auth.user?.$extras.fullname);
    }
    async logout({ auth, request, response, view }) {
        await auth.use('web').logout();
        response.redirect('/login');
    }
}
exports.default = IndexController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSW5kZXhDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsaUZBQWtDO0FBRWxDLE1BQXFCLGVBQWU7SUFFekIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBc0I7UUFDbkUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRS9CLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUN4RSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDN0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUE7UUFDN0MsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDMUI7YUFBTTtZQUNILFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDbEM7SUFFTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBc0I7UUFDeEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMxQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSTthQUNsQixLQUFLLEVBQUU7YUFDUCxLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUMzQixLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUMzQixXQUFXLEVBQUUsQ0FBQTtRQUVsQixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWpDLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQXNCO1FBQ3ZFLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUdyQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUNwRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDOUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQixDQUFDO0NBQ0o7QUE3Q0Qsa0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4Q29udHJvbGxlciB7XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoe2F1dGgsIHJlcXVlc3QsIHJlc3BvbnNlLCB2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICByZXR1cm4gdmlldy5yZW5kZXIoJ2luZGV4JylcblxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2dpbl9mb3JtKHthdXRoLCByZXF1ZXN0LCByZXNwb25zZSwgdmlld306IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgYXdhaXQgYXV0aC51c2UoJ3dlYicpLmNoZWNrKClcbiAgICAgICAgbGV0IGF1dGhlbnRpY2F0ZSA9IGF1dGgudXNlKCd3ZWInKS5pc0xvZ2dlZEluXG4gICAgICAgIGlmICghYXV0aGVudGljYXRlKSB7XG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcignbG9naW4nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UucmVkaXJlY3QoJy9kYXNoYm9hcmQnKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9naW5fcG9zdCh7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UsIHZpZXd9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gcmVxdWVzdC5pbnB1dCgndXNlcm5hbWUnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJyk7XG5cbiAgICAgICAgLy8gTG9va3VwIHVzZXIgbWFudWFsbHlcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJcbiAgICAgICAgICAgIC5xdWVyeSgpXG4gICAgICAgICAgICAud2hlcmUoJ3VzZXJuYW1lJywgdXNlcm5hbWUpXG4gICAgICAgICAgICAud2hlcmUoJ3Bhc3N3b3JkJywgcGFzc3dvcmQpXG4gICAgICAgICAgICAuZmlyc3RPckZhaWwoKVxuICAgICAgICAvLyBDcmVhdGUgc2Vzc2lvblxuICAgICAgICBhd2FpdCBhdXRoLnVzZSgnd2ViJykubG9naW4odXNlcilcblxuICAgICAgICByZXNwb25zZS5yZWRpcmVjdCgnL2Rhc2hib2FyZCcpXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRhc2hib2FyZCh7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UsIHZpZXd9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGF3YWl0IGF1dGgudXNlKCd3ZWInKS5hdXRoZW50aWNhdGUoKVxuXG4gICAgICAgIC8vIOKchSBSZXF1ZXN0IGF1dGhlbnRpY2F0ZWRcbiAgICAgICByZXNwb25zZS5zZW5kKGF1dGgudXNlcj8uJGV4dHJhcy5mdWxsbmFtZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9nb3V0KHthdXRoLCByZXF1ZXN0LCByZXNwb25zZSwgdmlld306IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgYXdhaXQgYXV0aC51c2UoJ3dlYicpLmxvZ291dCgpXG4gICAgICAgIHJlc3BvbnNlLnJlZGlyZWN0KCcvbG9naW4nKVxuICAgIH1cbn1cbiJdfQ==